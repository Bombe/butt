// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "flgui.h"

void flgui::cb_window_main_i(Fl_My_Double_Window*, void*) {
  window_main_close_cb();
}
void flgui::cb_window_main(Fl_My_Double_Window* o, void* v) {
  ((flgui*)(o->user_data()))->cb_window_main_i(o,v);
}

void flgui::cb_slider_gain_i(Fl_My_Value_Slider*, void*) {
  slider_gain_cb();
}
void flgui::cb_slider_gain(Fl_My_Value_Slider* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_slider_gain_i(o,v);
}

void flgui::cb_lcd_i(Fl_ILM216*, void*) {
  ILM216_cb();
}
void flgui::cb_lcd(Fl_ILM216* o, void* v) {
  ((flgui*)(o->parent()->parent()->user_data()))->cb_lcd_i(o,v);
}

void flgui::cb_button_connect_i(Fl_Button*, void*) {
  button_connect_cb();
}
void flgui::cb_button_connect(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->user_data()))->cb_button_connect_i(o,v);
}

void flgui::cb_button_disconnect_i(Fl_Button*, void*) {
  button_disconnect_cb();
}
void flgui::cb_button_disconnect(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->user_data()))->cb_button_disconnect_i(o,v);
}

void flgui::cb_button_record_i(Fl_Button*, void*) {
  button_record_cb();
}
void flgui::cb_button_record(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->user_data()))->cb_button_record_i(o,v);
}

void flgui::cb_button_info_i(Fl_Button*, void*) {
  button_info_cb();
}
void flgui::cb_button_info(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->user_data()))->cb_button_info_i(o,v);
}

#include <FL/Fl_Image.H>
static const unsigned char idata_green_dark[] =
{0,0,0,0,0,0,0,0,32,76,32,112,33,78,33,204,34,80,34,245,35,81,34,255,35,81,
34,245,34,79,33,204,32,77,32,112,0,0,0,0,0,0,0,0,0,0,0,0,32,77,32,153,35,81,34,
255,38,87,37,255,40,92,40,255,41,94,41,255,41,93,40,255,38,88,38,255,35,82,35,
255,33,78,33,153,0,0,0,0,32,76,32,112,35,81,34,255,39,90,39,255,44,99,44,255,48,
107,47,255,50,110,49,255,49,108,48,255,45,101,44,255,40,92,40,255,36,83,35,255,
33,77,32,112,33,78,33,204,38,87,37,255,44,99,44,255,51,112,50,255,57,123,56,
255,59,127,58,255,57,124,56,255,52,115,52,255,46,102,45,255,39,89,38,255,34,80,
34,224,34,80,34,245,40,92,40,255,48,107,47,255,57,123,56,255,63,136,63,255,67,
141,65,255,64,137,64,255,58,126,57,255,50,110,49,255,42,95,41,255,35,82,35,255,
35,81,34,255,41,94,41,255,50,110,49,255,59,127,58,255,67,141,65,255,70,147,69,
255,68,143,66,255,61,130,60,255,52,113,51,255,43,97,42,255,36,84,36,255,35,81,
34,245,41,93,40,255,49,108,48,255,57,124,56,255,64,137,64,255,68,143,66,255,65,
139,65,255,59,127,58,255,50,111,50,255,42,96,42,255,36,83,35,255,34,79,33,204,
38,88,38,255,45,101,44,255,52,115,52,255,58,126,57,255,61,130,60,255,59,127,58,
255,54,117,53,255,47,104,46,255,40,91,39,255,34,81,34,224,32,77,32,112,35,82,35,
255,40,92,40,255,46,102,45,255,50,110,49,255,52,113,51,255,50,111,50,255,47,104,
46,255,41,94,41,255,36,84,36,255,33,78,33,112,0,0,0,0,33,78,33,153,36,83,35,
255,39,89,38,255,42,95,41,255,43,97,42,255,42,96,42,255,40,91,39,255,36,84,36,
255,34,79,33,153,0,0,0,0,0,0,0,0,0,0,0,0,33,77,32,112,34,80,34,224,35,82,35,255,
36,84,36,255,36,83,35,255,34,81,34,224,33,78,33,112,0,0,0,0,0,0,0,0};
static Fl_Image *image_green_dark() {
  static Fl_Image *image = new Fl_RGB_Image(idata_green_dark, 11, 11, 4, 0);
  return image;
}

static const unsigned char idata_orange_dark[] =
{0,0,0,0,0,0,0,0,126,47,12,103,130,49,13,200,134,52,14,241,135,52,15,255,
134,52,14,241,131,50,14,200,128,48,13,103,0,0,0,0,0,0,0,0,0,0,0,0,128,48,13,140,
134,52,14,255,143,58,17,255,150,63,19,255,153,65,20,255,151,64,19,255,145,60,17,
255,136,53,15,255,130,49,13,139,0,0,0,0,126,47,12,103,134,52,14,255,147,61,18,
255,161,71,22,255,172,79,25,255,177,82,27,255,173,80,26,255,164,73,23,255,150,
63,19,255,137,54,15,255,129,48,13,102,130,49,13,200,143,58,17,255,161,71,22,
255,180,85,27,255,195,96,32,255,201,100,34,255,197,97,33,255,183,87,28,255,165,
74,23,255,147,61,18,255,132,51,14,217,134,52,14,241,150,63,19,255,172,79,25,
255,195,96,32,255,213,110,38,255,222,115,40,255,216,111,38,255,199,99,33,255,
177,82,26,255,154,66,20,255,136,53,15,255,135,52,15,255,153,65,20,255,177,82,27,
255,201,100,34,255,222,115,40,255,230,122,43,255,224,118,41,255,206,104,35,255,
182,86,28,255,158,69,21,255,138,55,16,255,134,52,14,241,151,64,19,255,173,80,26,
255,197,97,33,255,216,111,38,255,224,118,41,255,219,113,39,255,201,100,34,255,
178,83,27,255,155,67,20,255,137,54,15,255,131,50,14,200,145,60,17,255,164,73,23,
255,183,87,28,255,199,99,33,255,206,104,35,255,201,100,34,255,187,90,30,255,168,
76,24,255,148,62,18,255,134,52,14,216,128,48,13,103,136,53,15,255,150,63,19,
255,165,74,23,255,177,82,26,255,182,86,28,255,178,83,27,255,168,76,24,255,153,
65,20,255,139,55,16,255,130,49,13,102,0,0,0,0,130,49,13,139,137,54,15,255,147,
61,18,255,154,66,20,255,158,69,21,255,155,67,20,255,148,62,18,255,139,55,16,
255,132,50,14,138,0,0,0,0,0,0,0,0,0,0,0,0,129,48,13,102,132,51,14,217,136,53,15,
255,138,55,16,255,137,54,15,255,134,52,14,216,130,49,13,102,0,0,0,0,0,0,0,0};
static Fl_Image *image_orange_dark() {
  static Fl_Image *image = new Fl_RGB_Image(idata_orange_dark, 11, 11, 4, 0);
  return image;
}

static const unsigned char idata_red_dark[] =
{0,0,0,0,0,0,0,0,102,4,6,112,105,5,6,204,108,5,7,245,110,5,7,255,109,5,7,
245,106,5,6,204,103,5,6,112,0,0,0,0,0,0,0,0,0,0,0,0,103,5,6,153,109,5,7,255,118,
6,8,255,124,7,10,255,127,8,10,255,125,8,10,255,119,7,9,255,111,6,7,255,105,5,
6,153,0,0,0,0,102,4,6,112,109,5,7,255,122,7,9,255,135,9,12,255,145,10,14,255,
149,11,14,255,146,10,14,255,137,9,12,255,124,7,10,255,112,6,7,255,104,5,6,112,
105,5,6,204,118,6,8,255,135,9,12,255,152,11,15,255,166,13,18,255,173,14,19,255,
168,13,18,255,155,12,16,255,138,9,12,255,121,7,9,255,107,5,7,224,108,5,7,245,
124,7,10,255,145,10,14,255,166,13,18,255,184,16,21,255,192,17,23,255,187,16,22,
255,171,14,19,255,149,11,14,255,128,8,10,255,111,6,7,255,110,5,7,255,127,8,10,
255,149,11,14,255,173,14,19,255,192,17,23,255,200,18,25,255,195,17,23,255,177,
15,20,255,154,11,15,255,131,8,11,255,113,6,8,255,109,5,7,245,125,8,10,255,146,
10,14,255,168,13,18,255,187,16,22,255,195,17,23,255,189,16,22,255,173,14,19,
255,151,11,15,255,129,8,11,255,112,6,7,255,106,5,6,204,119,7,9,255,137,9,12,255,
155,12,16,255,171,14,19,255,177,15,20,255,173,14,19,255,159,12,16,255,141,10,13,
255,123,7,9,255,108,5,7,224,103,5,6,112,111,6,7,255,124,7,10,255,138,9,12,255,
149,11,14,255,154,11,15,255,151,11,15,255,141,10,13,255,127,8,10,255,113,6,8,
255,105,5,6,112,0,0,0,0,105,5,6,153,112,6,7,255,121,7,9,255,128,8,10,255,131,8,
11,255,129,8,11,255,123,7,9,255,113,6,8,255,107,5,6,153,0,0,0,0,0,0,0,0,0,0,0,
0,104,5,6,112,107,5,7,224,111,6,7,255,113,6,8,255,112,6,7,255,108,5,7,224,105,
5,6,112,0,0,0,0,0,0,0,0};
static Fl_Image *image_red_dark() {
  static Fl_Image *image = new Fl_RGB_Image(idata_red_dark, 11, 11, 4, 0);
  return image;
}

static const unsigned char idata_green_light[] =
{0,0,0,0,26,109,25,26,29,119,28,178,34,136,32,204,38,150,36,251,41,161,39,
255,43,166,41,251,43,165,41,204,40,156,38,178,39,151,37,26,0,0,0,0,23,101,22,26,
27,112,26,217,33,132,31,255,40,156,38,255,46,178,44,255,51,193,48,255,52,199,
50,255,51,192,48,255,46,177,44,255,41,159,39,217,38,148,36,26,24,102,23,178,29,
121,28,255,37,149,36,255,46,179,44,255,54,208,52,255,60,227,57,255,62,232,59,
255,59,222,56,255,53,201,50,255,46,175,43,255,39,152,37,185,25,106,24,204,32,
129,30,255,41,162,39,255,52,199,49,255,61,232,58,255,68,252,64,255,70,254,66,
255,66,246,63,255,58,220,55,255,49,187,47,255,40,156,38,255,25,105,23,251,32,
133,31,255,42,168,40,255,54,208,51,255,65,244,61,255,71,255,68,255,73,255,69,
255,69,253,65,255,60,227,57,255,50,191,48,255,40,157,38,255,24,103,23,255,32,
130,30,255,41,165,39,255,52,204,50,255,63,239,60,255,69,255,66,255,71,255,67,
255,66,249,63,255,58,220,55,255,48,185,46,255,39,151,37,255,23,98,21,251,29,123,
28,255,38,153,36,255,48,188,45,255,57,219,54,255,62,238,59,255,63,241,60,255,
59,227,56,255,52,200,49,255,43,169,41,255,35,140,33,255,21,92,20,204,26,111,25,
255,33,135,31,255,41,163,39,255,48,187,45,255,52,202,49,255,53,205,50,255,50,
193,47,255,44,172,42,255,37,147,35,255,30,124,29,255,19,84,18,178,22,97,21,255,
27,115,26,255,33,135,31,255,37,152,36,255,41,163,39,255,41,164,39,255,39,157,
37,255,35,142,34,255,30,124,29,255,26,110,25,184,17,80,17,26,19,86,18,217,22,
97,21,255,26,110,24,255,29,121,27,255,31,128,29,255,31,129,30,255,30,124,29,
255,27,115,26,255,25,105,24,216,24,101,22,25,0,0,0,0,17,80,17,26,18,84,18,185,
20,90,19,255,22,97,21,255,23,101,22,255,23,102,22,255,23,99,22,255,22,96,21,
184,22,95,21,25,0,0,0,0};
static Fl_Image *image_green_light() {
  static Fl_Image *image = new Fl_RGB_Image(idata_green_light, 11, 11, 4, 0);
  return image;
}

static const unsigned char idata_orange_light[] =
{0,0,0,0,211,102,2,26,226,112,2,178,248,129,2,204,254,143,2,251,255,153,3,
255,255,158,2,251,255,158,2,204,255,151,2,178,255,146,2,26,0,0,0,0,199,92,2,26,
216,104,2,217,244,125,3,255,255,147,3,255,255,167,3,255,255,180,4,255,255,185,4,
255,255,181,3,255,255,169,3,255,255,154,2,217,255,144,2,26,200,93,2,178,229,113,
3,255,254,139,3,255,255,167,4,255,255,191,5,255,255,207,5,255,255,211,5,255,
255,204,4,255,255,188,4,255,255,166,3,255,255,146,2,185,206,96,2,204,241,120,3,
255,255,150,4,255,255,182,5,255,255,210,6,255,255,227,6,255,255,232,6,255,255,
222,5,255,255,202,4,255,255,176,3,255,255,149,2,255,206,95,2,251,245,123,3,255,
255,155,5,255,255,190,6,255,255,219,7,255,255,237,8,255,255,241,7,255,255,230,6,
255,255,207,5,255,255,178,4,255,255,149,3,255,202,92,3,255,242,120,4,255,255,
152,5,255,255,186,6,255,255,215,8,255,255,233,8,255,255,236,8,255,255,224,7,255,
255,200,5,255,255,172,4,255,255,143,3,255,195,87,2,251,232,111,4,255,255,141,5,
255,255,172,6,255,255,198,7,255,255,214,8,255,255,217,8,255,255,205,7,255,255,
184,5,255,255,158,4,255,250,132,3,255,185,80,2,204,214,99,3,255,247,124,4,255,
255,150,5,255,255,171,6,255,255,184,7,255,255,186,7,255,255,177,6,255,255,159,5,
255,254,138,3,255,234,116,2,255,172,71,2,178,193,85,3,255,222,104,4,255,247,123,
4,255,255,140,5,255,255,150,5,255,255,151,5,255,255,145,5,255,251,132,4,255,
234,115,3,255,213,102,2,184,165,66,2,26,174,72,2,217,193,84,3,255,213,98,3,255,
230,110,4,255,240,117,4,255,241,118,4,255,235,114,3,255,221,105,3,255,206,96,2,
216,200,92,2,25,0,0,0,0,164,66,2,26,171,70,2,185,181,77,2,255,193,85,3,255,200,
90,3,255,201,91,3,255,197,88,2,255,192,86,2,184,190,84,2,25,0,0,0,0};
static Fl_Image *image_orange_light() {
  static Fl_Image *image = new Fl_RGB_Image(idata_orange_light, 11, 11, 4, 0);
  return image;
}

static const unsigned char idata_red_light[] =
{0,0,0,0,164,0,0,26,176,0,1,178,198,0,1,204,215,1,1,251,229,1,1,255,234,1,1,
251,234,0,1,204,223,0,1,178,216,0,1,26,0,0,0,0,153,0,0,26,168,0,1,217,194,1,1,
255,224,1,1,255,247,1,2,255,254,1,2,255,255,1,2,255,254,1,1,255,246,1,1,255,227,
0,1,217,214,0,1,26,154,0,1,178,180,1,1,255,215,1,1,255,248,1,2,255,255,2,2,
255,255,2,2,255,255,2,2,255,255,1,2,255,255,1,2,255,244,1,1,255,218,0,1,185,160,
0,1,204,191,1,1,255,232,1,2,255,255,2,3,255,255,2,3,255,255,2,3,255,255,2,3,
255,255,2,3,255,255,1,2,255,252,1,1,255,223,1,1,255,159,1,1,251,196,1,2,255,240,
2,2,255,255,2,3,255,255,3,4,255,255,3,4,255,255,3,4,255,255,2,3,255,255,2,3,
255,254,1,2,255,224,1,1,255,156,1,1,255,193,1,2,255,237,2,2,255,255,2,3,255,255,
3,4,255,255,3,4,255,255,3,4,255,255,2,4,255,255,2,3,255,251,1,2,255,218,1,1,
255,150,1,1,251,183,1,2,255,223,2,2,255,253,2,3,255,255,3,4,255,255,3,4,255,255,
3,4,255,255,2,3,255,255,2,3,255,239,1,2,255,203,1,1,255,142,0,1,204,167,1,1,
255,201,1,2,255,235,2,3,255,253,2,3,255,255,2,4,255,255,2,3,255,254,2,3,255,243,
1,2,255,214,1,1,255,184,1,1,255,130,0,1,178,148,1,1,255,174,1,2,255,200,1,2,
255,222,2,3,255,235,2,3,255,237,2,3,255,227,1,2,255,207,1,2,255,184,1,1,255,166,
0,1,184,124,0,1,26,132,0,1,217,148,1,1,255,166,1,1,255,182,1,2,255,191,1,2,
255,192,1,2,255,185,1,1,255,172,1,1,255,159,0,1,216,154,0,1,25,0,0,0,0,124,0,1,
26,129,0,1,185,138,1,1,255,148,1,1,255,154,1,1,255,155,1,1,255,151,1,1,255,147,
0,1,184,145,0,1,25,0,0,0,0};
static Fl_Image *image_red_light() {
  static Fl_Image *image = new Fl_RGB_Image(idata_red_light, 11, 11, 4, 0);
  return image;
}

void flgui::cb_button_cfg_i(Fl_Button*, void*) {
  button_cfg_cb();
}
void flgui::cb_button_cfg(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_button_cfg_i(o,v);
}

static const unsigned char idata_VU_text[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,255,0,0,0,255,0,0,
0,255,0,0,0,255,0,0,0,32,0,0,0,197,0,0,0,243,0,0,0,196,0,0,0,31,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,0,0,213,0,0,0,247,0,0,0,210,0,0,
0,63,0,0,0,32,0,0,0,197,0,0,0,243,0,0,0,196,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,207,0,0,0,246,0,0,0,196,0,0,0,41,0,0,0,
32,0,0,0,197,0,0,0,243,0,0,0,196,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,9,0,0,0,95,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,207,0,0,
0,246,0,0,0,196,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,141,0,0,0,255,0,0,0,28,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,
0,0,0,197,0,0,0,243,0,0,0,196,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,95,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,66,0,0,0,213,0,0,0,247,0,0,0,210,0,0,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,16,0,0,0,181,0,0,0,247,0,0,0,213,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,170,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,0,0,0,122,0,0,0,13,0,0,0,121,
0,0,0,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,0,0,0,72,
0,0,0,7,0,0,0,75,0,0,0,225,0,0,0,172,0,0,0,122,0,0,0,13,0,0,0,121,0,0,0,168,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,0,0,122,0,0,0,12,0,
0,0,95,0,0,0,200,0,0,0,172,0,0,0,122,0,0,0,13,0,0,0,121,0,0,0,168,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,
0,0,0,0,0,184,0,0,0,122,0,0,0,12,0,0,0,95,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,188,0,0,0,255,0,
0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,172,0,0,0,122,0,0,0,13,0,0,0,121,0,0,0,168,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,
0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,0,0,0,72,0,0,0,7,0,0,0,75,0,0,0,225,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,0,0,0,129,0,0,0,14,0,0,0,77,0,0,0,220,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,236,0,0,0,222,0,0,0,247,0,0,0,199,0,0,0,44,0,0,
0,232,0,0,0,21,0,0,0,0,0,0,0,21,0,0,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,0,0,0,105,0,0,0,224,0,0,0,232,0,0,0,21,0,
0,0,0,0,0,0,21,0,0,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,242,0,0,0,13,0,0,0,0,0,0,0,18,0,0,0,242,0,0,0,232,0,0,0,21,0,0,0,0,0,0,0,21,
0,0,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,255,0,0,0,0,0,0,0,0,0,0,0,242,0,0,0,13,0,0,0,0,0,0,0,18,0,0,0,242,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,212,0,0,
0,26,0,0,0,255,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,0,0,0,21,0,0,0,0,0,0,0,21,0,0,0,
231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,0,0,0,105,0,0,0,
224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,0,0,0,199,0,0,0,245,0,0,0,201,0,
0,0,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,109,0,0,0,204,
0,0,0,250,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,249,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,98,0,0,0,250,0,0,0,
4,0,0,0,0,0,0,0,4,0,0,0,249,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,8,0,0,0,157,0,0,0,99,0,0,0,250,0,0,0,4,0,0,0,0,0,0,0,4,0,
0,0,249,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,157,0,0,0,99,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,0,0,0,77,0,0,0,0,0,
0,0,255,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,249,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,98,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,0,0,0,113,0,0,0,9,0,0,0,112,0,0,0,
202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,244,
0,0,0,232,0,0,0,22,0,0,0,0,0,0,0,22,0,0,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,19,0,0,0,95,0,0,0,226,0,0,0,232,0,0,0,
22,0,0,0,0,0,0,0,22,0,0,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,84,0,0,0,216,0,0,0,68,0,0,0,0,0,0,0,232,0,0,0,22,0,0,0,0,0,0,0,
22,0,0,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,216,0,0,0,68,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,
0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,0,0,0,22,0,0,0,0,0,0,0,22,0,0,0,
231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,
0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,19,0,0,0,95,
0,0,0,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,0,0,0,12,0,0,0,0,0,0,0,
11,0,0,0,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,220,0,0,0,91,0,0,0,8,0,0,0,112,0,
0,0,187,0,0,0,173,0,0,0,126,0,0,0,13,0,0,0,125,0,0,0,170,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,0,0,0,77,0,0,0,7,0,0,0,77,0,0,0,223,0,0,
0,173,0,0,0,126,0,0,0,13,0,0,0,125,0,0,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,106,0,0,0,234,0,0,0,70,0,0,0,0,0,0,0,0,0,0,0,173,0,0,0,
126,0,0,0,13,0,0,0,125,0,0,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,106,0,0,0,234,0,0,0,70,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,173,0,0,0,126,0,0,0,
13,0,0,0,125,0,0,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,0,0,0,77,0,
0,0,7,0,0,0,77,0,0,0,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,0,0,0,
119,0,0,0,10,0,0,0,106,0,0,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,0,0,211,
0,0,0,245,0,0,0,193,0,0,0,34,0,0,0,34,0,0,0,198,0,0,0,244,0,0,0,197,0,0,0,33,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,213,0,0,0,246,
0,0,0,209,0,0,0,59,0,0,0,34,0,0,0,198,0,0,0,244,0,0,0,197,0,0,0,33,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,0,0,0,255,0,0,0,255,0,0,0,255,
0,0,0,255,0,0,0,34,0,0,0,198,0,0,0,244,0,0,0,197,0,0,0,33,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,
224,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,34,0,0,0,198,0,0,0,244,0,0,0,197,0,0,0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,71,0,0,0,213,0,0,0,246,0,0,0,209,0,0,0,59,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,30,0,0,0,192,0,0,0,243,0,0,0,201,0,0,0,40,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_Image *image_VU_text() {
  static Fl_Image *image = new Fl_RGB_Image(idata_VU_text, 157, 10, 4, 0);
  return image;
}

void flgui::cb_window_cfg_i(Fl_My_Double_Window*, void*) {
  window_cfg->hide();
button_cfg->label("Settings@>");
}
void flgui::cb_window_cfg(Fl_My_Double_Window* o, void* v) {
  ((flgui*)(o->user_data()))->cb_window_cfg_i(o,v);
}

void flgui::cb_choice_cfg_act_srv_i(Fl_Choice*, void*) {
  choice_cfg_act_srv_cb();
}
void flgui::cb_choice_cfg_act_srv(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_cfg_act_srv_i(o,v);
}

void flgui::cb_ADD_i(Fl_Button*, void*) {
  button_cfg_add_srv_cb();
}
void flgui::cb_ADD(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ADD_i(o,v);
}

void flgui::cb_button_cfg_edit_srv_i(Fl_Button*, void*) {
  button_cfg_edit_srv_cb();
}
void flgui::cb_button_cfg_edit_srv(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_cfg_edit_srv_i(o,v);
}

void flgui::cb_button_cfg_del_srv_i(Fl_Button*, void*) {
  button_cfg_del_srv_cb();
}
void flgui::cb_button_cfg_del_srv(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_cfg_del_srv_i(o,v);
}

void flgui::cb_choice_cfg_act_icy_i(Fl_Choice*, void*) {
  choice_cfg_act_icy_cb();
}
void flgui::cb_choice_cfg_act_icy(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_cfg_act_icy_i(o,v);
}

void flgui::cb_ADD1_i(Fl_Button*, void*) {
  button_cfg_add_icy_cb();
}
void flgui::cb_ADD1(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ADD1_i(o,v);
}

void flgui::cb_button_cfg_edit_icy_i(Fl_Button*, void*) {
  button_cfg_edit_icy_cb();
}
void flgui::cb_button_cfg_edit_icy(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_cfg_edit_icy_i(o,v);
}

void flgui::cb_button_cfg_del_icy_i(Fl_Button*, void*) {
  button_cfg_del_icy_cb();
}
void flgui::cb_button_cfg_del_icy(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_cfg_del_icy_i(o,v);
}

void flgui::cb_input_log_filename_i(Fl_Input*, void*) {
  input_log_filename_cb();
}
void flgui::cb_input_log_filename(Fl_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_log_filename_i(o,v);
}

void flgui::cb__i(Fl_Button*, void*) {
  button_cfg_log_browse_cb();
}
void flgui::cb_(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb__i(o,v);
}

void flgui::cb_Import_i(Fl_Button*, void*) {
  button_cfg_import_cb();
}
void flgui::cb_Import(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Import_i(o,v);
}

void flgui::cb_Save_i(Fl_Button*, void*) {
  cfg_write_file(NULL);
}
void flgui::cb_Save(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Save_i(o,v);
}

void flgui::cb_Export_i(Fl_Button*, void*) {
  button_cfg_export_cb();
}
void flgui::cb_Export(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Export_i(o,v);
}

void flgui::cb_choice_cfg_dev_i(Fl_Choice*, void*) {
  choice_cfg_dev_cb();
}
void flgui::cb_choice_cfg_dev(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_cfg_dev_i(o,v);
}

void flgui::cb_Stereo_i(Fl_Menu_*, void*) {
  choice_cfg_channel_stereo_cb();
}
void flgui::cb_Stereo(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Stereo_i(o,v);
}

void flgui::cb_Mono_i(Fl_Menu_*, void*) {
  choice_cfg_channel_mono_cb();
}
void flgui::cb_Mono(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Mono_i(o,v);
}

Fl_Menu_Item flgui::menu_choice_cfg_channel[] = {
 {"Stereo", 0,  (Fl_Callback*)flgui::cb_Stereo, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Mono", 0,  (Fl_Callback*)flgui::cb_Mono, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_cfg_samplerate_i(Fl_Choice*, void*) {
  choice_cfg_samplerate_cb();
}
void flgui::cb_choice_cfg_samplerate(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_cfg_samplerate_i(o,v);
}

void flgui::cb_choice_cfg_source_channel_i(Fl_Choice*, void*) {
  choice_cfg_source_channel_cb();
}
void flgui::cb_choice_cfg_source_channel(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_cfg_source_channel_i(o,v);
}

void flgui::cb_MP3_i(Fl_Menu_*, void*) {
  choice_cfg_codec_mp3_cb();
}
void flgui::cb_MP3(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_MP3_i(o,v);
}

void flgui::cb_OGG_i(Fl_Menu_*, void*) {
  choice_cfg_codec_ogg_cb();
}
void flgui::cb_OGG(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_OGG_i(o,v);
}

void flgui::cb_OPUS_i(Fl_Menu_*, void*) {
  choice_cfg_codec_opus_cb();
}
void flgui::cb_OPUS(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_OPUS_i(o,v);
}

void flgui::cb_AAC_i(Fl_Menu_*, void*) {
  choice_cfg_codec_aac_cb();
}
void flgui::cb_AAC(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_AAC_i(o,v);
}

Fl_Menu_Item flgui::menu_choice_cfg_codec[] = {
 {"MP3", 0,  (Fl_Callback*)flgui::cb_MP3, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"OGG/VORBIS", 0,  (Fl_Callback*)flgui::cb_OGG, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"OPUS", 0,  (Fl_Callback*)flgui::cb_OPUS, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"AAC+", 0,  (Fl_Callback*)flgui::cb_AAC, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_cfg_bitrate_i(Fl_Choice*, void*) {
  choice_cfg_bitrate_cb();
}
void flgui::cb_choice_cfg_bitrate(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_cfg_bitrate_i(o,v);
}

Fl_Menu_Item flgui::menu_choice_cfg_bitrate[] = {
 {"8k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"16k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"24k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"32k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"40k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"48k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"56k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"64k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"80k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"96k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"112k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"128k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"160k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"192k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"224k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"256k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"320k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_MP31_i(Fl_Menu_*, void*) {
  choice_rec_codec_mp3_cb();
}
void flgui::cb_MP31(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_MP31_i(o,v);
}

void flgui::cb_OGG1_i(Fl_Menu_*, void*) {
  choice_rec_codec_ogg_cb();
}
void flgui::cb_OGG1(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_OGG1_i(o,v);
}

void flgui::cb_OPUS1_i(Fl_Menu_*, void*) {
  choice_rec_codec_opus_cb();
}
void flgui::cb_OPUS1(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_OPUS1_i(o,v);
}

void flgui::cb_AAC1_i(Fl_Menu_*, void*) {
  choice_rec_codec_aac_cb();
}
void flgui::cb_AAC1(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_AAC1_i(o,v);
}

void flgui::cb_FLAC_i(Fl_Menu_*, void*) {
  choice_rec_codec_flac_cb();
}
void flgui::cb_FLAC(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_FLAC_i(o,v);
}

void flgui::cb_WAV_i(Fl_Menu_*, void*) {
  choice_rec_codec_wav_cb();
}
void flgui::cb_WAV(Fl_Menu_* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_WAV_i(o,v);
}

Fl_Menu_Item flgui::menu_choice_rec_codec[] = {
 {"MP3", 0,  (Fl_Callback*)flgui::cb_MP31, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"OGG/VORBIS", 0,  (Fl_Callback*)flgui::cb_OGG1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"OPUS", 0,  (Fl_Callback*)flgui::cb_OPUS1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"AAC+", 0,  (Fl_Callback*)flgui::cb_AAC1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"FLAC", 0,  (Fl_Callback*)flgui::cb_FLAC, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"WAV", 0,  (Fl_Callback*)flgui::cb_WAV, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_choice_rec_bitrate_i(Fl_Choice*, void*) {
  choice_rec_bitrate_cb();
}
void flgui::cb_choice_rec_bitrate(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choice_rec_bitrate_i(o,v);
}

Fl_Menu_Item flgui::menu_choice_rec_bitrate[] = {
 {"8k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"16k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"24k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"32k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"40k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"48k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"56k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"64k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"80k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"96k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"112k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"128k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"160k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"192k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"224k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"256k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"320k", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_button_advanced_i(Fl_Button*, void*) {
  static int show_advanced = 0;
if (!show_advanced) {
	fl_g->input_cfg_buffer->show();
	fl_g->choice_cfg_resample_mode->show();
	show_advanced = 1;
	fl_g->button_advanced->label("Standard...");
} else {
	fl_g->input_cfg_buffer->hide();
	fl_g->choice_cfg_resample_mode->hide();
	show_advanced = 0;
	fl_g->button_advanced->label("Advanced...");
};
}
void flgui::cb_button_advanced(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_button_advanced_i(o,v);
}

void flgui::cb_input_cfg_buffer_i(Fl_Value_Input*, void*) {
  input_cfg_buffer_cb(1);
}
void flgui::cb_input_cfg_buffer(Fl_Value_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_input_cfg_buffer_i(o,v);
}

void flgui::cb_choice_cfg_resample_mode_i(Fl_Choice*, void*) {
  choice_cfg_resample_mode_cb();
}
void flgui::cb_choice_cfg_resample_mode(Fl_Choice* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_cfg_resample_mode_i(o,v);
}

Fl_Menu_Item flgui::menu_choice_cfg_resample_mode[] = {
 {"SINC_BEST", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"SINC_MEDIUM", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"SINC_FASTEST", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"ZERO_ORDER_HOLD", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"LINEAR", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void flgui::cb_input_cfg_song_file_i(Fl_Input*, void*) {
  input_cfg_song_file_cb();
}
void flgui::cb_input_cfg_song_file(Fl_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_cfg_song_file_i(o,v);
}

void flgui::cb_button_songfile_browse_i(Fl_Button*, void*) {
  button_cfg_browse_songfile_cb();
}
void flgui::cb_button_songfile_browse(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_songfile_browse_i(o,v);
}

void flgui::cb_check_song_update_active_i(Fl_Check_Button*, void*) {
  check_song_update_active_cb();
}
void flgui::cb_check_song_update_active(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_song_update_active_i(o,v);
}

void flgui::cb_input_cfg_song_i(Fl_Input*, void*) {
  input_cfg_song_cb();
}
void flgui::cb_input_cfg_song(Fl_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_cfg_song_i(o,v);
}

void flgui::cb_OK_i(Fl_Button*, void*) {
  button_cfg_song_go_cb();
}
void flgui::cb_OK(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_OK_i(o,v);
}

void flgui::cb_check_cfg_connect_i(Fl_Check_Button*, void*) {
  check_cfg_connect_cb();
}
void flgui::cb_check_cfg_connect(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_check_cfg_connect_i(o,v);
}

void flgui::cb_input_rec_filename_i(Fl_Input*, void*) {
  input_rec_filename_cb();
}
void flgui::cb_input_rec_filename(Fl_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_input_rec_filename_i(o,v);
}

void flgui::cb_input_rec_folder_i(Fl_Input*, void*) {
  input_rec_folder_cb();
}
void flgui::cb_input_rec_folder(Fl_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_input_rec_folder_i(o,v);
}

void flgui::cb_button_rec_browse_i(Fl_Button*, void*) {
  button_rec_browse_cb();
}
void flgui::cb_button_rec_browse(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_button_rec_browse_i(o,v);
}

void flgui::cb_input_rec_split_time_i(Fl_Value_Input*, void*) {
  input_rec_split_time_cb();
}
void flgui::cb_input_rec_split_time(Fl_Value_Input* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_rec_split_time_i(o,v);
}

void flgui::cb_check_sync_to_full_hour_i(Fl_Check_Button*, void*) {
  check_sync_to_full_hour_cb();
}
void flgui::cb_check_sync_to_full_hour(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_check_sync_to_full_hour_i(o,v);
}

void flgui::cb_Split_i(Fl_Button*, void*) {
  button_rec_split_now_cb();
}
void flgui::cb_Split(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Split_i(o,v);
}

void flgui::cb_check_cfg_rec_i(Fl_Check_Button*, void*) {
  check_cfg_rec_cb();
}
void flgui::cb_check_cfg_rec(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_check_cfg_rec_i(o,v);
}

void flgui::cb_button_gui_text_color_i(Fl_Button*, void*) {
  button_gui_text_color_cb();
}
void flgui::cb_button_gui_text_color(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_gui_text_color_i(o,v);
}

void flgui::cb_button_gui_bg_color_i(Fl_Button*, void*) {
  button_gui_bg_color_cb();
}
void flgui::cb_button_gui_bg_color(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_gui_bg_color_i(o,v);
}

void flgui::cb_check_gui_attach_i(Fl_Check_Button*, void*) {
  check_gui_attach_cb();
}
void flgui::cb_check_gui_attach(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_check_gui_attach_i(o,v);
}

void flgui::cb_check_gui_ontop_i(Fl_Check_Button*, void*) {
  check_gui_ontop_cb();
}
void flgui::cb_check_gui_ontop(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_check_gui_ontop_i(o,v);
}

void flgui::cb_check_gui_lcd_auto_i(Fl_Check_Button*, void*) {
  check_gui_lcd_auto_cb();
}
void flgui::cb_check_gui_lcd_auto(Fl_Check_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->parent()->user_data()))->cb_check_gui_lcd_auto_i(o,v);
}

void flgui::cb_radio_add_srv_shoutcast_i(Fl_Round_Button*, void*) {
  radio_add_srv_shoutcast_cb();
}
void flgui::cb_radio_add_srv_shoutcast(Fl_Round_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->user_data()))->cb_radio_add_srv_shoutcast_i(o,v);
}

void flgui::cb_radio_add_srv_icecast_i(Fl_Round_Button*, void*) {
  radio_add_srv_icecast_cb();
}
void flgui::cb_radio_add_srv_icecast(Fl_Round_Button* o, void* v) {
  ((flgui*)(o->parent()->parent()->user_data()))->cb_radio_add_srv_icecast_i(o,v);
}

void flgui::cb_Cancel_i(Fl_Button*, void*) {
  button_add_srv_cancel_cb();
}
void flgui::cb_Cancel(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_Cancel_i(o,v);
}

void flgui::cb_button_add_srv_add_i(Fl_Button*, void*) {
  button_add_srv_add_cb();
}
void flgui::cb_button_add_srv_add(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_button_add_srv_add_i(o,v);
}

void flgui::cb_button_add_srv_save_i(Fl_Button*, void*) {
  button_add_srv_save_cb();
}
void flgui::cb_button_add_srv_save(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_button_add_srv_save_i(o,v);
}

void flgui::cb_button_cfg_show_pw_i(Fl_Button*, void*) {
  button_add_srv_show_pwd_cb();
}
void flgui::cb_button_cfg_show_pw(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_button_cfg_show_pw_i(o,v);
}

void flgui::cb_Cancel1_i(Fl_Button*, void*) {
  button_add_icy_cancel_cb();
}
void flgui::cb_Cancel1(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_Cancel1_i(o,v);
}

void flgui::cb_button_add_icy_add_i(Fl_Button*, void*) {
  button_add_icy_add_cb();
}
void flgui::cb_button_add_icy_add(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_button_add_icy_add_i(o,v);
}

void flgui::cb_button_add_icy_save_i(Fl_Button*, void*) {
  button_add_icy_save_cb();
}
void flgui::cb_button_add_icy_save(Fl_Button* o, void* v) {
  ((flgui*)(o->parent()->user_data()))->cb_button_add_icy_save_i(o,v);
}

flgui::flgui() {
  { window_main = new Fl_My_Double_Window(430, 380);
    window_main->box(FL_FLAT_BOX);
    window_main->color(FL_BACKGROUND_COLOR);
    window_main->selection_color(FL_BACKGROUND_COLOR);
    window_main->labeltype(FL_NO_LABEL);
    window_main->labelfont(0);
    window_main->labelsize(14);
    window_main->labelcolor(FL_FOREGROUND_COLOR);
    window_main->callback((Fl_Callback*)cb_window_main, (void*)(this));
    window_main->align(Fl_Align(FL_ALIGN_TOP));
    window_main->when(FL_WHEN_RELEASE);
    { slider_gain = new Fl_My_Value_Slider(50, 168, 335, 15);
      slider_gain->tooltip("Gain");
      slider_gain->type(5);
      slider_gain->box(FL_NO_BOX);
      slider_gain->color(FL_BACKGROUND_COLOR);
      slider_gain->selection_color(FL_BACKGROUND_COLOR);
      slider_gain->labeltype(FL_NORMAL_LABEL);
      slider_gain->labelfont(0);
      slider_gain->labelsize(14);
      slider_gain->labelcolor(FL_FOREGROUND_COLOR);
      slider_gain->minimum(-24);
      slider_gain->maximum(24);
      slider_gain->step(0.1);
      slider_gain->callback((Fl_Callback*)cb_slider_gain);
      slider_gain->align(Fl_Align(FL_ALIGN_BOTTOM));
      slider_gain->when(FL_WHEN_CHANGED);
    } // Fl_My_Value_Slider* slider_gain
    { Fl_Group* o = new Fl_Group(0, -1, 430, 164);
      { lcd = new Fl_ILM216(10, 9, 410, 95);
        lcd->tooltip("press left mouse to toggle lcd info");
        lcd->box(FL_ENGRAVED_BOX);
        lcd->color(FL_SELECTION_COLOR);
        lcd->selection_color((Fl_Color)41);
        lcd->labeltype(FL_NORMAL_LABEL);
        lcd->labelfont(0);
        lcd->labelsize(14);
        lcd->labelcolor(FL_FOREGROUND_COLOR);
        lcd->callback((Fl_Callback*)cb_lcd);
        lcd->align(Fl_Align(FL_ALIGN_CENTER));
        lcd->when(FL_WHEN_RELEASE);
      } // Fl_ILM216* lcd
      { button_connect = new Fl_Button(102, 121, 30, 30, "@> ");
        button_connect->tooltip("connect to server");
        button_connect->box(FL_ENGRAVED_BOX);
        button_connect->shortcut(0x40063);
        button_connect->down_box(FL_ENGRAVED_BOX);
        button_connect->color((Fl_Color)48);
        button_connect->selection_color((Fl_Color)40);
        button_connect->labelfont(1);
        button_connect->labelcolor(FL_BACKGROUND2_COLOR);
        button_connect->callback((Fl_Callback*)cb_button_connect);
      } // Fl_Button* button_connect
      { button_disconnect = new Fl_Button(62, 121, 30, 30, "@-3square");
        button_disconnect->tooltip("disconnect from server");
        button_disconnect->box(FL_ENGRAVED_BOX);
        button_disconnect->shortcut(0x40064);
        button_disconnect->down_box(FL_ENGRAVED_BOX);
        button_disconnect->color((Fl_Color)48);
        button_disconnect->selection_color((Fl_Color)40);
        button_disconnect->labelfont(1);
        button_disconnect->labelcolor(FL_BACKGROUND2_COLOR);
        button_disconnect->callback((Fl_Callback*)cb_button_disconnect);
      } // Fl_Button* button_disconnect
      { button_record = new Fl_Button(10, 121, 30, 30, "@-3circle");
        button_record->tooltip("start/stop recording");
        button_record->box(FL_ENGRAVED_BOX);
        button_record->shortcut(0x40072);
        button_record->down_box(FL_ENGRAVED_BOX);
        button_record->color((Fl_Color)48);
        button_record->selection_color((Fl_Color)40);
        button_record->labelfont(1);
        button_record->labelcolor((Fl_Color)1);
        button_record->callback((Fl_Callback*)cb_button_record);
      } // Fl_Button* button_record
      { button_info = new Fl_Button(352, 143, 68, 15, "More @2<");
        button_info->tooltip("show/hide info window");
        button_info->box(FL_ENGRAVED_BOX);
        button_info->shortcut(0x40076);
        button_info->color((Fl_Color)48);
        button_info->labelsize(10);
        button_info->callback((Fl_Callback*)cb_button_info);
      } // Fl_Button* button_info
      { LEDs_dark = new Fl_Group(171, 115, 149, 39);
        LEDs_dark->tooltip("VU meter");
        { right_1_dark = new Fl_Box(171, 118, 11, 11);
          right_1_dark->image( image_green_dark() );
          right_1_dark->labelsize(8);
        } // Fl_Box* right_1_dark
        { right_2_dark = new Fl_Box(187, 118, 11, 11);
          right_2_dark->image( image_green_dark() );
        } // Fl_Box* right_2_dark
        { right_3_dark = new Fl_Box(203, 118, 11, 11);
          right_3_dark->image( image_green_dark() );
        } // Fl_Box* right_3_dark
        { right_4_dark = new Fl_Box(219, 118, 11, 11);
          right_4_dark->image( image_green_dark() );
        } // Fl_Box* right_4_dark
        { right_5_dark = new Fl_Box(235, 118, 11, 11);
          right_5_dark->image( image_green_dark() );
        } // Fl_Box* right_5_dark
        { right_6_dark = new Fl_Box(251, 118, 11, 11);
          right_6_dark->image( image_green_dark() );
        } // Fl_Box* right_6_dark
        { right_7_dark = new Fl_Box(273, 118, 11, 11);
          right_7_dark->image( image_orange_dark() );
        } // Fl_Box* right_7_dark
        { right_8_dark = new Fl_Box(289, 118, 11, 11);
          right_8_dark->image( image_orange_dark() );
        } // Fl_Box* right_8_dark
        { right_9_dark = new Fl_Box(308, 118, 11, 11);
          right_9_dark->image( image_red_dark() );
        } // Fl_Box* right_9_dark
        { left_1_dark = new Fl_Box(171, 142, 11, 11);
          left_1_dark->image( image_green_dark() );
        } // Fl_Box* left_1_dark
        { left_2_dark = new Fl_Box(187, 142, 11, 11);
          left_2_dark->image( image_green_dark() );
        } // Fl_Box* left_2_dark
        { left_3_dark = new Fl_Box(203, 142, 11, 11);
          left_3_dark->image( image_green_dark() );
        } // Fl_Box* left_3_dark
        { left_4_dark = new Fl_Box(219, 142, 11, 11);
          left_4_dark->image( image_green_dark() );
        } // Fl_Box* left_4_dark
        { left_5_dark = new Fl_Box(235, 142, 11, 11);
          left_5_dark->image( image_green_dark() );
        } // Fl_Box* left_5_dark
        { left_6_dark = new Fl_Box(251, 142, 11, 11);
          left_6_dark->image( image_green_dark() );
        } // Fl_Box* left_6_dark
        { left_7_dark = new Fl_Box(273, 142, 11, 11);
          left_7_dark->image( image_orange_dark() );
        } // Fl_Box* left_7_dark
        { left_8_dark = new Fl_Box(289, 142, 11, 11);
          left_8_dark->image( image_orange_dark() );
        } // Fl_Box* left_8_dark
        { left_9_dark = new Fl_Box(308, 142, 11, 11);
          left_9_dark->image( image_red_dark() );
        } // Fl_Box* left_9_dark
        LEDs_dark->end();
      } // Fl_Group* LEDs_dark
      { LEDs_light = new Fl_Group(169, 111, 155, 48);
        LEDs_light->tooltip("VU meter");
        { right_1_light = new Fl_Box(171, 118, 11, 11);
          right_1_light->image( image_green_light() );
          right_1_light->hide();
        } // Fl_Box* right_1_light
        { right_2_light = new Fl_Box(187, 118, 11, 11);
          right_2_light->image( image_green_light() );
          right_2_light->hide();
        } // Fl_Box* right_2_light
        { right_3_light = new Fl_Box(203, 118, 11, 11);
          right_3_light->image( image_green_light() );
          right_3_light->hide();
        } // Fl_Box* right_3_light
        { right_4_light = new Fl_Box(219, 118, 11, 11);
          right_4_light->image( image_green_light() );
          right_4_light->hide();
        } // Fl_Box* right_4_light
        { right_5_light = new Fl_Box(235, 118, 11, 11);
          right_5_light->image( image_green_light() );
          right_5_light->hide();
        } // Fl_Box* right_5_light
        { right_6_light = new Fl_Box(251, 118, 11, 11);
          right_6_light->image( image_green_light() );
          right_6_light->hide();
        } // Fl_Box* right_6_light
        { right_7_light = new Fl_Box(273, 118, 11, 11);
          right_7_light->image( image_orange_light() );
          right_7_light->hide();
        } // Fl_Box* right_7_light
        { right_8_light = new Fl_Box(289, 118, 11, 11);
          right_8_light->image( image_orange_light() );
          right_8_light->hide();
        } // Fl_Box* right_8_light
        { right_9_light = new Fl_Box(308, 118, 11, 11);
          right_9_light->image( image_red_light() );
          right_9_light->hide();
        } // Fl_Box* right_9_light
        { left_1_light = new Fl_Box(171, 142, 11, 11);
          left_1_light->image( image_green_light() );
          left_1_light->hide();
        } // Fl_Box* left_1_light
        { left_2_light = new Fl_Box(187, 142, 11, 11);
          left_2_light->image( image_green_light() );
          left_2_light->hide();
        } // Fl_Box* left_2_light
        { left_3_light = new Fl_Box(203, 142, 11, 11);
          left_3_light->image( image_green_light() );
          left_3_light->hide();
        } // Fl_Box* left_3_light
        { left_4_light = new Fl_Box(219, 142, 11, 11);
          left_4_light->image( image_green_light() );
          left_4_light->hide();
        } // Fl_Box* left_4_light
        { left_5_light = new Fl_Box(235, 142, 11, 11);
          left_5_light->image( image_green_light() );
          left_5_light->hide();
        } // Fl_Box* left_5_light
        { left_6_light = new Fl_Box(251, 142, 11, 11);
          left_6_light->image( image_green_light() );
          left_6_light->hide();
        } // Fl_Box* left_6_light
        { left_7_light = new Fl_Box(273, 142, 11, 11);
          left_7_light->image( image_orange_light() );
          left_7_light->hide();
        } // Fl_Box* left_7_light
        { left_8_light = new Fl_Box(289, 142, 11, 11);
          left_8_light->image( image_orange_light() );
          left_8_light->hide();
        } // Fl_Box* left_8_light
        { left_9_light = new Fl_Box(308, 142, 11, 11);
          left_9_light->image( image_red_light() );
          left_9_light->hide();
        } // Fl_Box* left_9_light
        LEDs_light->end();
      } // Fl_Group* LEDs_light
      o->end();
    } // Fl_Group* o
    { info_output = new Fl_Text_Display(0, 195, 430, 184);
      info_output->box(FL_EMBOSSED_BOX);
      info_output->textfont(4);
      info_output->textsize(15);
      Fl_Group::current()->resizable(info_output);
    } // Fl_Text_Display* info_output
    { button_cfg = new Fl_Button(352, 114, 68, 22, "Settings@>");
      button_cfg->tooltip("show/hide config window");
      button_cfg->box(FL_ENGRAVED_BOX);
      button_cfg->shortcut(0x40066);
      button_cfg->color((Fl_Color)48);
      button_cfg->labelfont(1);
      button_cfg->labelsize(11);
      button_cfg->callback((Fl_Callback*)cb_button_cfg);
    } // Fl_Button* button_cfg
    { VU_Text = new Fl_Box(169, 128, 154, 17);
      VU_Text->image( image_VU_text() );
      VU_Text->labelfont(1);
      VU_Text->labelsize(10);
    } // Fl_Box* VU_Text
    { R_VU = new Fl_Box(150, 118, 25, 13, "R");
      R_VU->labelfont(1);
      R_VU->labelsize(11);
    } // Fl_Box* R_VU
    { L_VU = new Fl_Box(150, 142, 25, 13, "L");
      L_VU->labelfont(1);
      L_VU->labelsize(11);
    } // Fl_Box* L_VU
    { Fl_Box* o = new Fl_Box(10, 167, 30, 16, "-24dB");
      o->labelfont(1);
      o->labelsize(10);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(390, 167, 30, 16, "+24dB");
      o->labelfont(1);
      o->labelsize(10);
    } // Fl_Box* o
    window_main->size_range(430, 155, 430);
    window_main->end();
  } // Fl_My_Double_Window* window_main
  { window_cfg = new Fl_My_Double_Window(324, 511, "butt settings");
    window_cfg->box(FL_FLAT_BOX);
    window_cfg->color(FL_BACKGROUND_COLOR);
    window_cfg->selection_color(FL_BACKGROUND_COLOR);
    window_cfg->labeltype(FL_NO_LABEL);
    window_cfg->labelfont(0);
    window_cfg->labelsize(14);
    window_cfg->labelcolor(FL_FOREGROUND_COLOR);
    window_cfg->callback((Fl_Callback*)cb_window_cfg, (void*)(this));
    window_cfg->align(Fl_Align(FL_ALIGN_TOP));
    window_cfg->when(FL_WHEN_RELEASE);
    { Settings = new Fl_Tabs(10, 10, 301, 488);
      Settings->selection_color((Fl_Color)41);
      { Fl_Group* o = new Fl_Group(11, 30, 300, 370, "Main");
        o->when(FL_WHEN_RELEASE_ALWAYS);
        { Fl_Group* o = new Fl_Group(26, 65, 265, 140, "Server Settings");
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { choice_cfg_act_srv = new Fl_Choice(34, 86, 250, 20, "Server");
            choice_cfg_act_srv->tooltip("Server to connect to");
            choice_cfg_act_srv->down_box(FL_BORDER_BOX);
            choice_cfg_act_srv->callback((Fl_Callback*)cb_choice_cfg_act_srv);
            choice_cfg_act_srv->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Choice* choice_cfg_act_srv
          { Fl_Button* o = new Fl_Button(34, 108, 43, 20, "ADD");
            o->tooltip("Add server");
            o->box(FL_ENGRAVED_BOX);
            o->callback((Fl_Callback*)cb_ADD);
          } // Fl_Button* o
          { button_cfg_edit_srv = new Fl_Button(136, 108, 43, 20, "EDIT");
            button_cfg_edit_srv->tooltip("Edit selected server");
            button_cfg_edit_srv->box(FL_ENGRAVED_BOX);
            button_cfg_edit_srv->callback((Fl_Callback*)cb_button_cfg_edit_srv);
          } // Fl_Button* button_cfg_edit_srv
          { button_cfg_del_srv = new Fl_Button(241, 108, 43, 20, "DEL");
            button_cfg_del_srv->tooltip("Delete selected server");
            button_cfg_del_srv->box(FL_ENGRAVED_BOX);
            button_cfg_del_srv->callback((Fl_Callback*)cb_button_cfg_del_srv);
          } // Fl_Button* button_cfg_del_srv
          { choice_cfg_act_icy = new Fl_Choice(34, 153, 250, 20, "Stream Infos");
            choice_cfg_act_icy->tooltip("Stream info that shall be used");
            choice_cfg_act_icy->down_box(FL_BORDER_BOX);
            choice_cfg_act_icy->callback((Fl_Callback*)cb_choice_cfg_act_icy);
            choice_cfg_act_icy->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Choice* choice_cfg_act_icy
          { Fl_Button* o = new Fl_Button(34, 175, 43, 20, "ADD");
            o->tooltip("Add stream info");
            o->box(FL_ENGRAVED_BOX);
            o->callback((Fl_Callback*)cb_ADD1);
          } // Fl_Button* o
          { button_cfg_edit_icy = new Fl_Button(136, 175, 43, 20, "EDIT");
            button_cfg_edit_icy->tooltip("Edit stream info");
            button_cfg_edit_icy->box(FL_ENGRAVED_BOX);
            button_cfg_edit_icy->callback((Fl_Callback*)cb_button_cfg_edit_icy);
          } // Fl_Button* button_cfg_edit_icy
          { button_cfg_del_icy = new Fl_Button(241, 175, 43, 20, "DEL");
            button_cfg_del_icy->tooltip("Delete stream info");
            button_cfg_del_icy->box(FL_ENGRAVED_BOX);
            button_cfg_del_icy->callback((Fl_Callback*)cb_button_cfg_del_icy);
          } // Fl_Button* button_cfg_del_icy
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(26, 243, 265, 35, "Log File");
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { input_log_filename = new Fl_Input(31, 249, 225, 25);
            input_log_filename->tooltip("Log file path");
            input_log_filename->callback((Fl_Callback*)cb_input_log_filename);
            input_log_filename->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Input* input_log_filename
          { Fl_Button* o = new Fl_Button(260, 249, 25, 25);
            o->tooltip("Select log file");
            o->box(FL_ENGRAVED_BOX);
            o->callback((Fl_Callback*)cb_);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(26, 331, 265, 50, "Configuration");
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { Fl_Button* o = new Fl_Button(31, 341, 70, 28, "Import...");
            o->tooltip("Import settings from config file");
            o->box(FL_ENGRAVED_BOX);
            o->callback((Fl_Callback*)cb_Import);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(111, 341, 95, 28, "&Save");
            o->tooltip("Save settings");
            o->box(FL_ENGRAVED_BOX);
            o->callback((Fl_Callback*)cb_Save);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(215, 341, 70, 28, "Export...");
            o->tooltip("export settings");
            o->box(FL_ENGRAVED_BOX);
            o->callback((Fl_Callback*)cb_Export);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(11, 29, 300, 469, "Audio");
        o->hide();
        { Fl_Group* o = new Fl_Group(26, 65, 265, 140, "Main Audio Settings");
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { choice_cfg_dev = new Fl_Choice(34, 94, 250, 20, "Audio Device");
            choice_cfg_dev->tooltip("select your sound card device");
            choice_cfg_dev->down_box(FL_FLAT_BOX);
            choice_cfg_dev->callback((Fl_Callback*)cb_choice_cfg_dev);
            choice_cfg_dev->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Choice* choice_cfg_dev
          { choice_cfg_channel = new Fl_Choice(34, 134, 114, 20, "Channel");
            choice_cfg_channel->tooltip("Select input channel");
            choice_cfg_channel->box(FL_ENGRAVED_BOX);
            choice_cfg_channel->down_box(FL_BORDER_BOX);
            choice_cfg_channel->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            choice_cfg_channel->menu(menu_choice_cfg_channel);
          } // Fl_Choice* choice_cfg_channel
          { choice_cfg_samplerate = new Fl_Choice(169, 134, 115, 20, "Samplerate");
            choice_cfg_samplerate->tooltip("Select input sample rate");
            choice_cfg_samplerate->down_box(FL_BORDER_BOX);
            choice_cfg_samplerate->callback((Fl_Callback*)cb_choice_cfg_samplerate);
            choice_cfg_samplerate->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Choice* choice_cfg_samplerate
          { choice_cfg_source_channel = new Fl_Choice(34, 174, 114, 20, "Source Channel");
            choice_cfg_source_channel->down_box(FL_BORDER_BOX);
            choice_cfg_source_channel->callback((Fl_Callback*)cb_choice_cfg_source_channel);
            choice_cfg_source_channel->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Choice* choice_cfg_source_channel
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(26, 235, 265, 60, "Streaming");
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { choice_cfg_codec = new Fl_Choice(31, 263, 125, 20, "Codec");
            choice_cfg_codec->tooltip("Select streaming codec");
            choice_cfg_codec->box(FL_ENGRAVED_BOX);
            choice_cfg_codec->down_box(FL_BORDER_BOX);
            choice_cfg_codec->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            choice_cfg_codec->menu(menu_choice_cfg_codec);
          } // Fl_Choice* choice_cfg_codec
          { choice_cfg_bitrate = new Fl_Choice(171, 263, 115, 20, "Bitrate");
            choice_cfg_bitrate->tooltip("Select streaming bitrate");
            choice_cfg_bitrate->box(FL_ENGRAVED_BOX);
            choice_cfg_bitrate->down_box(FL_BORDER_BOX);
            choice_cfg_bitrate->callback((Fl_Callback*)cb_choice_cfg_bitrate);
            choice_cfg_bitrate->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            choice_cfg_bitrate->menu(menu_choice_cfg_bitrate);
          } // Fl_Choice* choice_cfg_bitrate
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(26, 325, 265, 60, "Recording");
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { choice_rec_codec = new Fl_Choice(31, 354, 125, 20, "Codec");
            choice_rec_codec->tooltip("Select recording codec");
            choice_rec_codec->box(FL_ENGRAVED_BOX);
            choice_rec_codec->down_box(FL_BORDER_BOX);
            choice_rec_codec->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            choice_rec_codec->menu(menu_choice_rec_codec);
          } // Fl_Choice* choice_rec_codec
          { choice_rec_bitrate = new Fl_Choice(171, 354, 115, 20, "Bitrate");
            choice_rec_bitrate->tooltip("Select recording bitrate");
            choice_rec_bitrate->down_box(FL_BORDER_BOX);
            choice_rec_bitrate->callback((Fl_Callback*)cb_choice_rec_bitrate);
            choice_rec_bitrate->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            choice_rec_bitrate->menu(menu_choice_rec_bitrate);
          } // Fl_Choice* choice_rec_bitrate
          o->end();
        } // Fl_Group* o
        { button_advanced = new Fl_Button(26, 405, 89, 25, "Advanced...");
          button_advanced->box(FL_ENGRAVED_BOX);
          button_advanced->callback((Fl_Callback*)cb_button_advanced);
        } // Fl_Button* button_advanced
        { input_cfg_buffer = new Fl_Value_Input(26, 460, 75, 20, "Buffer (ms)");
          input_cfg_buffer->maximum(0);
          input_cfg_buffer->value(50);
          input_cfg_buffer->callback((Fl_Callback*)cb_input_cfg_buffer);
          input_cfg_buffer->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          input_cfg_buffer->when(FL_WHEN_ENTER_KEY);
          input_cfg_buffer->hide();
        } // Fl_Value_Input* input_cfg_buffer
        { choice_cfg_resample_mode = new Fl_Choice(166, 460, 125, 20, "Resample Quality");
          choice_cfg_resample_mode->down_box(FL_BORDER_BOX);
          choice_cfg_resample_mode->callback((Fl_Callback*)cb_choice_cfg_resample_mode);
          choice_cfg_resample_mode->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          choice_cfg_resample_mode->hide();
          choice_cfg_resample_mode->menu(menu_choice_cfg_resample_mode);
        } // Fl_Choice* choice_cfg_resample_mode
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(11, 29, 300, 216, "Stream");
        o->hide();
        { Fl_Group* o = new Fl_Group(26, 65, 265, 65, "Update song name from file");
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { input_cfg_song_file = new Fl_Input(31, 74, 225, 25);
            input_cfg_song_file->tooltip("Filename that holds the current song name");
            input_cfg_song_file->callback((Fl_Callback*)cb_input_cfg_song_file);
            input_cfg_song_file->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
            this->input_cfg_song_file->maximum_size(500);
          } // Fl_Input* input_cfg_song_file
          { button_songfile_browse = new Fl_Button(261, 74, 25, 25);
            button_songfile_browse->tooltip("Select file that holds the current song name");
            button_songfile_browse->box(FL_ENGRAVED_FRAME);
            button_songfile_browse->callback((Fl_Callback*)cb_button_songfile_browse);
          } // Fl_Button* button_songfile_browse
          { check_song_update_active = new Fl_Check_Button(29, 101, 152, 25, "Activate");
            check_song_update_active->tooltip("Activate auto update song name from file");
            check_song_update_active->down_box(FL_DOWN_BOX);
            check_song_update_active->callback((Fl_Callback*)cb_check_song_update_active);
          } // Fl_Check_Button* check_song_update_active
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(26, 159, 265, 40, "Update song name manually");
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { input_cfg_song = new Fl_Input(31, 167, 225, 25);
            input_cfg_song->tooltip("Current song name");
            input_cfg_song->callback((Fl_Callback*)cb_input_cfg_song);
            input_cfg_song->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            this->input_cfg_song->maximum_size(500);
          } // Fl_Input* input_cfg_song
          { Fl_Button* o = new Fl_Button(261, 167, 25, 25, "OK");
            o->tooltip("Send current song name to the server");
            o->box(FL_ENGRAVED_BOX);
            o->shortcut(0xff0d);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_OK);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { check_cfg_connect = new Fl_Check_Button(26, 212, 159, 18, "Start streaming at startup");
          check_cfg_connect->tooltip("Connect automatically to a server at startup");
          check_cfg_connect->down_box(FL_DOWN_BOX);
          check_cfg_connect->callback((Fl_Callback*)cb_check_cfg_connect);
        } // Fl_Check_Button* check_cfg_connect
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(11, 29, 300, 256, "Record");
        o->hide();
        { input_rec_filename = new Fl_Input(26, 65, 265, 25, "Record File Name");
          input_rec_filename->tooltip("Record file name");
          input_rec_filename->callback((Fl_Callback*)cb_input_rec_filename);
          input_rec_filename->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          this->input_rec_filename->maximum_size(500);
        } // Fl_Input* input_rec_filename
        { input_rec_folder = new Fl_Input(26, 116, 235, 25, "Record Directory");
          input_rec_folder->tooltip("Directory of recordings");
          input_rec_folder->callback((Fl_Callback*)cb_input_rec_folder);
          input_rec_folder->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          this->input_rec_folder->maximum_size(500);
        } // Fl_Input* input_rec_folder
        { button_rec_browse = new Fl_Button(266, 116, 25, 25);
          button_rec_browse->tooltip("Select recording directory");
          button_rec_browse->box(FL_ENGRAVED_BOX);
          button_rec_browse->callback((Fl_Callback*)cb_button_rec_browse);
        } // Fl_Button* button_rec_browse
        { Fl_Group* o = new Fl_Group(26, 174, 265, 57, "Split file");
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { input_rec_split_time = new Fl_Value_Input(71, 181, 40, 19, "every");
            input_rec_split_time->callback((Fl_Callback*)cb_input_rec_split_time);
          } // Fl_Value_Input* input_rec_split_time
          { text_rec_split_time = new Fl_Box(116, 181, 50, 16, "minutes");
          } // Fl_Box* text_rec_split_time
          { check_sync_to_full_hour = new Fl_Check_Button(31, 206, 124, 15, "Sync to full hour");
            check_sync_to_full_hour->tooltip("Sync to full hour");
            check_sync_to_full_hour->down_box(FL_DOWN_BOX);
            check_sync_to_full_hour->callback((Fl_Callback*)cb_check_sync_to_full_hour);
          } // Fl_Check_Button* check_sync_to_full_hour
          { Fl_Button* o = new Fl_Button(211, 188, 70, 30, "Split now");
            o->box(FL_ENGRAVED_BOX);
            o->callback((Fl_Callback*)cb_Split);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { check_cfg_rec = new Fl_Check_Button(26, 256, 265, 15, "Start recording when connected");
          check_cfg_rec->tooltip("Start recording when connected");
          check_cfg_rec->down_box(FL_DOWN_BOX);
          check_cfg_rec->callback((Fl_Callback*)cb_check_cfg_rec);
        } // Fl_Check_Button* check_cfg_rec
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(11, 29, 300, 216, "GUI");
        o->hide();
        { Fl_Group* o = new Fl_Group(26, 60, 265, 80, "Display Color:");
          o->box(FL_ENGRAVED_FRAME);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { button_gui_text_color = new Fl_Button(34, 70, 25, 25, "Select text color");
            button_gui_text_color->tooltip("Select text color");
            button_gui_text_color->box(FL_SHADOW_BOX);
            button_gui_text_color->color(FL_BACKGROUND2_COLOR);
            button_gui_text_color->callback((Fl_Callback*)cb_button_gui_text_color);
            button_gui_text_color->align(Fl_Align(FL_ALIGN_RIGHT));
          } // Fl_Button* button_gui_text_color
          { button_gui_bg_color = new Fl_Button(34, 105, 25, 25, "Select background color");
            button_gui_bg_color->tooltip("Select background color");
            button_gui_bg_color->box(FL_SHADOW_BOX);
            button_gui_bg_color->color(FL_SELECTION_COLOR);
            button_gui_bg_color->callback((Fl_Callback*)cb_button_gui_bg_color);
            button_gui_bg_color->align(Fl_Align(FL_ALIGN_RIGHT));
          } // Fl_Button* button_gui_bg_color
          o->end();
        } // Fl_Group* o
        { check_gui_attach = new Fl_Check_Button(26, 163, 245, 22, "Attach this window to butt window");
          check_gui_attach->tooltip("Attach this window to the butt window");
          check_gui_attach->down_box(FL_DOWN_BOX);
          check_gui_attach->callback((Fl_Callback*)cb_check_gui_attach);
        } // Fl_Check_Button* check_gui_attach
        { check_gui_ontop = new Fl_Check_Button(26, 188, 175, 20, "Stay always on top");
          check_gui_ontop->tooltip("Stay always on top");
          check_gui_ontop->down_box(FL_DOWN_BOX);
          check_gui_ontop->callback((Fl_Callback*)cb_check_gui_ontop);
        } // Fl_Check_Button* check_gui_ontop
        { check_gui_lcd_auto = new Fl_Check_Button(26, 208, 230, 27, "Change LCD mode every 5 secs");
          check_gui_lcd_auto->tooltip("Change LCD mode every 5 seconds");
          check_gui_lcd_auto->down_box(FL_DOWN_BOX);
          check_gui_lcd_auto->callback((Fl_Callback*)cb_check_gui_lcd_auto);
        } // Fl_Check_Button* check_gui_lcd_auto
        o->end();
      } // Fl_Group* o
      Settings->end();
    } // Fl_Tabs* Settings
    window_cfg->end();
  } // Fl_My_Double_Window* window_cfg
  { window_add_srv = new Fl_Double_Window(305, 380, "Add server");
    window_add_srv->user_data((void*)(this));
    { input_add_srv_name = new Fl_Input(60, 30, 170, 25, "Name:");
      input_add_srv_name->align(Fl_Align(FL_ALIGN_TOP));
      this->input_add_srv_name->maximum_size(100);
    } // Fl_Input* input_add_srv_name
    { input_add_srv_addr = new Fl_Input(10, 185, 170, 25, "Address:");
      input_add_srv_addr->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      this->input_add_srv_addr->maximum_size(100);
    } // Fl_Input* input_add_srv_addr
    { input_add_srv_port = new Fl_Int_Input(185, 185, 110, 25, "Port:");
      input_add_srv_port->type(2);
      input_add_srv_port->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Int_Input* input_add_srv_port
    { input_add_srv_pwd = new Fl_Input(10, 230, 170, 25, "Password:");
      input_add_srv_pwd->type(5);
      input_add_srv_pwd->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      this->input_add_srv_pwd->maximum_size(100);
    } // Fl_Input* input_add_srv_pwd
    { input_add_srv_mount = new Fl_Input(10, 280, 172, 25, "IceCast mountpoint:");
      input_add_srv_mount->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      this->input_add_srv_mount->maximum_size(100);
    } // Fl_Input* input_add_srv_mount
    { input_add_srv_usr = new Fl_Input(185, 280, 110, 25, "IceCast user:");
      input_add_srv_usr->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      this->input_add_srv_usr->maximum_size(100);
    } // Fl_Input* input_add_srv_usr
    { Fl_Group* o = new Fl_Group(60, 108, 170, 32, "Type:");
      o->box(FL_ENGRAVED_BOX);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { radio_add_srv_shoutcast = new Fl_Round_Button(64, 111, 88, 25, "ShoutCast");
        radio_add_srv_shoutcast->type(102);
        radio_add_srv_shoutcast->down_box(FL_ROUND_DOWN_BOX);
        radio_add_srv_shoutcast->callback((Fl_Callback*)cb_radio_add_srv_shoutcast);
      } // Fl_Round_Button* radio_add_srv_shoutcast
      { radio_add_srv_icecast = new Fl_Round_Button(152, 111, 76, 25, "IceCast");
        radio_add_srv_icecast->type(102);
        radio_add_srv_icecast->down_box(FL_ROUND_DOWN_BOX);
        radio_add_srv_icecast->callback((Fl_Callback*)cb_radio_add_srv_icecast);
      } // Fl_Round_Button* radio_add_srv_icecast
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(10, 340, 74, 25, "&Cancel");
      o->box(FL_ENGRAVED_BOX);
      o->callback((Fl_Callback*)cb_Cancel);
    } // Fl_Button* o
    { button_add_srv_add = new Fl_Button(224, 340, 74, 25, "&ADD");
      button_add_srv_add->box(FL_ENGRAVED_BOX);
      button_add_srv_add->callback((Fl_Callback*)cb_button_add_srv_add);
    } // Fl_Button* button_add_srv_add
    { button_add_srv_save = new Fl_Button(224, 340, 74, 25, "&Save");
      button_add_srv_save->box(FL_ENGRAVED_BOX);
      button_add_srv_save->callback((Fl_Callback*)cb_button_add_srv_save);
    } // Fl_Button* button_add_srv_save
    { button_cfg_show_pw = new Fl_Button(185, 230, 110, 25, "Show Password");
      button_cfg_show_pw->tooltip("show/hide password");
      button_cfg_show_pw->box(FL_ENGRAVED_BOX);
      button_cfg_show_pw->callback((Fl_Callback*)cb_button_cfg_show_pw);
    } // Fl_Button* button_cfg_show_pw
    window_add_srv->set_modal();
    window_add_srv->end();
  } // Fl_Double_Window* window_add_srv
  { window_add_icy = new Fl_Double_Window(305, 380, "Add stream info");
    window_add_icy->user_data((void*)(this));
    { input_add_icy_name = new Fl_Input(65, 35, 170, 25, "Name:");
      input_add_icy_name->tooltip("The name of your new ICY-entrie");
      input_add_icy_name->align(Fl_Align(FL_ALIGN_TOP));
      this->input_add_icy_name->maximum_size(100);
    } // Fl_Input* input_add_icy_name
    { input_add_icy_desc = new Fl_Input(10, 145, 170, 25, "Description:");
      input_add_icy_desc->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      this->input_add_icy_desc->maximum_size(100);
    } // Fl_Input* input_add_icy_desc
    { input_add_icy_genre = new Fl_Input(185, 145, 110, 25, "Genre:");
      input_add_icy_genre->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      this->input_add_icy_genre->maximum_size(100);
    } // Fl_Input* input_add_icy_genre
    { input_add_icy_url = new Fl_Input(10, 190, 170, 25, "URL:");
      input_add_icy_url->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      this->input_add_icy_url->maximum_size(100);
    } // Fl_Input* input_add_icy_url
    { input_add_icy_icq = new Fl_Input(185, 190, 110, 25, "ICQ:");
      input_add_icy_icq->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      this->input_add_icy_icq->maximum_size(100);
    } // Fl_Input* input_add_icy_icq
    { input_add_icy_irc = new Fl_Input(10, 235, 170, 25, "IRC:");
      input_add_icy_irc->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      this->input_add_icy_irc->maximum_size(100);
    } // Fl_Input* input_add_icy_irc
    { input_add_icy_aim = new Fl_Input(185, 235, 110, 25, "AIM:");
      input_add_icy_aim->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      this->input_add_icy_aim->maximum_size(100);
    } // Fl_Input* input_add_icy_aim
    { check_add_icy_pub = new Fl_Check_Button(10, 270, 166, 20, "Make server public");
      check_add_icy_pub->down_box(FL_DOWN_BOX);
    } // Fl_Check_Button* check_add_icy_pub
    { Fl_Button* o = new Fl_Button(10, 340, 74, 25, "&Cancel");
      o->box(FL_ENGRAVED_BOX);
      o->callback((Fl_Callback*)cb_Cancel1);
    } // Fl_Button* o
    { button_add_icy_add = new Fl_Button(224, 340, 74, 25, "&ADD");
      button_add_icy_add->box(FL_ENGRAVED_BOX);
      button_add_icy_add->callback((Fl_Callback*)cb_button_add_icy_add);
    } // Fl_Button* button_add_icy_add
    { button_add_icy_save = new Fl_Button(224, 340, 74, 25, "&Save");
      button_add_icy_save->box(FL_ENGRAVED_BOX);
      button_add_icy_save->callback((Fl_Callback*)cb_button_add_icy_save);
    } // Fl_Button* button_add_icy_save
    window_add_icy->set_modal();
    window_add_icy->end();
  } // Fl_Double_Window* window_add_icy
  Fl::scheme("standard");
  window_main->label(PACKAGE_STRING);
  
  info_buffer = new Fl_Text_Buffer();
  info_output->buffer(info_buffer);
  
  // show info output...
  info_visible = 1;
                  
  info_output->show();
  button_info->label("Less @8>");
}
